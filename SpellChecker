from random import randrange
from string import ascii_lowercase
from collections import MutableMapping
class MapBase(MutableMapping):

    
    class _Item:
        __slots__='_key','_value'
        
        def __init__(self,k,v):
            self._key=k
            self._value=v
        def __eq__(self,other):
            return self._key==other._key
        def __ne__(self,other):
            return not (self==other)
        def __lt__(self,other):
            return self._key<other._key
class UnsortedTableMap(MapBase):  
    def __init__(self):
        self._table=[]
    def __getitem__(self,k):
        for item in self._table:
            if k==item._key:
                return item._value
        raise KeyError("Key Error")
    def __setitem__(self,k,v):        
        for item in self._table:
            if k==item._key:
                item._value=v
                return
        self._table.append(self._Item(k,v))
    def __delitem__(self,k):
        for j in range(len(self._table)):
            if k==self._table[j]._key:
                self._table.pop(j)
                return
        raise KeyError("KeyError")
    def __len__(self):
        return len(self._table)
    def __iter__(self):
        for item in self._table:
            yield item._key
class HashMapBase(MapBase):
    def __init__(self,cap=11,p=109345121):
        self._table=cap* [None]
        self._n=0
        self._prime=p
        self._scale=1 +randrange(p-1)
        self._shift=randrange(p)
    def _hash_function(self,k):
        return (hash(k)*self._scale +self._shift)% self._prime  %len(self._table)
    def __len__(self):
        return self._n
    def __getitem__(self,k):
        j=self._hash_function(k)
        return self._bucket_getitem(j,k)
    def __setitem__(self,k,v):
        j=self._hash_function(k)
        self._bucket_setitem(j,k,v)
        if self._n >len(self._table)//2:
            self._resize(2*len(self._table)-1)
    def __delitem__(self,k):
        j=self._hash_function(k)
        self._bucket_delitem(j,k)
        self._n-=1
    def _resize(self,c):
        old=list(self.items())
        self._table=c* [None]
        self._n=0
        for (k,v) in old:
            self[k]=v
class ChainHashMap(HashMapBase):
    
    def _bucket_getitem(self,j,k):
        bucket=self._table[j]
        if bucket is None:
            raise KeyError("Key Error")
        return bucket[k]
    def _bucket_setitem(self,j,k,v):
        if self._table[j] is None:
            self._table[j]=UnsortedTableMap()
        oldsize=len(self._table[j])
        self._table[j][k]=v
        if len(self._table[j])>oldsize:
            self._n+=1
    def _bucket_delitem(self,j,k):
        bucket=self._table[j]
        if bucket is None:
            return
        del bucket[k]
    def __iter__(self):
        for bucket in self._table:
            if bucket is not None:
                for key in bucket:
                    yield key

import requests
class SpellChecker: 
    def __init__(self):
        url='https://raw.githubusercontent.com/first20hours/google-10000-english/master/google-10000-english.txt'
        r = requests.get(url, allow_redirects=True)
        open('inputfile.txt','wb').write(r.content)
        y=open("inputfile.txt")
        self.chash=ChainHashMap()
        for line in y:
            x=line.rstrip("\n")
            if len(x)<6:
                continue
            else:
                self.chash[x]=object()
        
    def check(self,file):
        output_text=open("Assignment3Outgput.txt","x")
        fil=open(file)
        words=[line.rstrip("\n").split() for line  in fil.readlines()]
        for line in words:
            for word in line:
              final_list=[]
              if word in self.chash:
                  final_list.append("OK")
                
              else:
                 for x in range(0,len(word)-1):
                    for k in range(len(ascii_lowercase)):
                       new1=word[0:x+1]+ ascii_lowercase[k] +word[x+1:len(word)]
                       if new1!=word:
                           if new1 in self.chash:
                               final_list.append(new1)
                    new2=word[0:x] +word[x+1:]
                    if new2 in self.chash:
                        if new2 not in final_list:
                             final_list.append(new2)
                 if word[:len(word)-1] in self.chash:
                     if word[:len(word)-1] not in final_list:
                        final_list.append(word[:len(word)-1])
              if len(final_list)==0:
                 final_list.append("No Recommendation")                  
              y=(",").join(final_list[0:2])
              output_text.write(f"{word} --> {y}"+"\n") 
              print(len(self.chash))
        output_text.close()
        # import os
        #os.remove("inputfile.txt") optional
